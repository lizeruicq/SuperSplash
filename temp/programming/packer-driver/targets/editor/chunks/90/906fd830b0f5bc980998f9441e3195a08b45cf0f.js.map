{"version":3,"sources":["file:///Users/zeruili/projects/cocos_project/TopRacing/assets/scripts/collision_detector.ts"],"names":["_decorator","Component","Node","Vec3","TiledMap","TiledLayer","ccclass","property","CollisionDetector","_tiledMap","_trackLayer","_mapWidth","_mapHeight","_tileWidth","_tileHeight","start","_initCollisionSystem","trackLayer","getComponent","console","error","mapInfo","getMapSize","width","height","tileSize","getTileSize","log","mapSize","isOnTrack","worldPos","mapPos","_worldToMapPosition","x","y","tileGID","getTileGIDAt","mapWorldPos","worldPosition","localX","localY","mapScale","scale","scaledLocalX","scaledLocalY","tileX","Math","floor","tileY","mapY","getCollisionRadius","collisionRadius"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Vec3, UITransform, TiledMap, TiledLayer } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('CollisionDetector')\nexport class CollisionDetector extends Component {\n    @property(Node)\n    trackLayer: Node = null!; // 赛道层级节点\n\n    @property\n    collisionRadius: number = 20; // 碰撞检测半径\n\n    private _tiledMap: TiledMap = null!;\n    private _trackLayer: TiledLayer = null!;\n    private _mapWidth: number = 0;\n    private _mapHeight: number = 0;\n    private _tileWidth: number = 0;\n    private _tileHeight: number = 0;\n\n    start() {\n        this._initCollisionSystem();\n    }\n\n    private _initCollisionSystem() {\n        // 获取tilemap组件\n        this._tiledMap = this.trackLayer.getComponent(TiledMap)!;\n        if (!this._tiledMap) {\n            console.error('Track layer does not have TiledMap component');\n            return;\n        }\n\n        // 获取赛道层级\n        this._trackLayer = this.trackLayer.getComponent(TiledLayer)!;\n        if (!this._trackLayer) {\n            console.error('Track layer does not have TiledLayer component');\n            return;\n        }\n\n        // 获取地图信息\n        const mapInfo = this._tiledMap.getMapSize();\n        this._mapWidth = mapInfo.width;\n        this._mapHeight = mapInfo.height;\n        \n        const tileSize = this._tiledMap.getTileSize();\n        this._tileWidth = tileSize.width;\n        this._tileHeight = tileSize.height;\n\n        console.log('Collision system initialized:', {\n            mapSize: `${this._mapWidth}x${this._mapHeight}`,\n            tileSize: `${this._tileWidth}x${this._tileHeight}`\n        });\n    }\n\n    /**\n     * 检查指定位置是否在赛道上\n     * @param worldPos 世界坐标\n     * @returns 是否在赛道上\n     */\n    public isOnTrack(worldPos: Vec3): boolean {\n        if (!this._tiledMap || !this._trackLayer) {\n            return true; // 如果没有初始化，默认允许移动\n        }\n\n        // 将世界坐标转换为地图坐标\n        const mapPos = this._worldToMapPosition(worldPos);\n        \n        // 检查地图边界\n        if (mapPos.x < 0 || mapPos.x >= this._mapWidth || \n            mapPos.y < 0 || mapPos.y >= this._mapHeight) {\n            return false;\n        }\n\n        // 获取该位置的tile\n        const tileGID = this._trackLayer.getTileGIDAt(mapPos.x, mapPos.y);\n        \n        // 如果tileGID为0，表示没有tile（不是赛道）\n        return tileGID > 0;\n    }\n\n    /**\n     * 将世界坐标转换为地图坐标\n     */\n    private _worldToMapPosition(worldPos: Vec3): Vec3 {\n        // 获取地图节点的世界坐标\n        const mapWorldPos = this.trackLayer.worldPosition;\n        \n        // 计算相对于地图的本地坐标\n        const localX = worldPos.x - mapWorldPos.x;\n        const localY = worldPos.y - mapWorldPos.y;\n        \n        // 考虑地图的缩放\n        const mapScale = this.trackLayer.scale;\n        const scaledLocalX = localX / mapScale.x;\n        const scaledLocalY = localY / mapScale.y;\n        \n        // 转换为tile坐标\n        const tileX = Math.floor(scaledLocalX / this._tileWidth);\n        const tileY = Math.floor(scaledLocalY / this._tileHeight);\n        \n        // 注意：tilemap的Y轴是倒置的\n        const mapY = this._mapHeight - 1 - tileY;\n        \n        return new Vec3(tileX, mapY, 0);\n    }\n\n    /**\n     * 获取碰撞检测半径\n     */\n    public getCollisionRadius(): number {\n        return this.collisionRadius;\n    }\n} "]}