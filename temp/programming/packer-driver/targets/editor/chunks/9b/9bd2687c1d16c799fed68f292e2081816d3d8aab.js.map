{"version":3,"sources":["file:///Users/zeruili/projects/cocos_project/TopRacing/assets/scripts/physics_collision.ts"],"names":["_decorator","Component","RigidBody2D","Collider2D","Contact2DType","Vec2","ccclass","property","PhysicsCollision","_rigidBody","_collider","start","getComponent","console","error","on","BEGIN_CONTACT","onBeginContact","END_CONTACT","onEndContact","onDestroy","off","selfCollider","otherCollider","contact","log","node","name","includes","_handleBoundaryCollision","normal","getWorldManifold","bounceVelocity","x","bounceForce","y","applyLinearImpulse","getWorldCenter"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAiBC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,U,OAAAA,U;AAAYC,MAAAA,a,OAAAA,a;AAAkCC,MAAAA,I,OAAAA,I;;;;;;;;;;;OAE3F;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBP,U;;kCAGjBQ,gB,WADZF,OAAO,CAAC,kBAAD,C,2BAAR,MACaE,gBADb,SACsCP,SADtC,CACgD;AAAA;AAAA;;AAAA;;AAEjB;AAFiB,eAIpCQ,UAJoC,GAIV,IAJU;AAAA,eAKpCC,SALoC,GAKZ,IALY;AAAA;;AAO5CC,QAAAA,KAAK,GAAG;AACJ;AACA,eAAKF,UAAL,GAAkB,KAAKG,YAAL,CAAkBV,WAAlB,CAAlB;;AACA,cAAI,CAAC,KAAKO,UAAV,EAAsB;AAClBI,YAAAA,OAAO,CAACC,KAAR,CAAc,iDAAd;AACA;AACH,WANG,CAQJ;;;AACA,eAAKJ,SAAL,GAAiB,KAAKE,YAAL,CAAkBT,UAAlB,CAAjB;;AACA,cAAI,CAAC,KAAKO,SAAV,EAAqB;AACjBG,YAAAA,OAAO,CAACC,KAAR,CAAc,gDAAd;AACA;AACH,WAbG,CAeJ;;;AACA,eAAKJ,SAAL,CAAeK,EAAf,CAAkBX,aAAa,CAACY,aAAhC,EAA+C,KAAKC,cAApD,EAAoE,IAApE;;AACA,eAAKP,SAAL,CAAeK,EAAf,CAAkBX,aAAa,CAACc,WAAhC,EAA6C,KAAKC,YAAlD,EAAgE,IAAhE;AACH;;AAEDC,QAAAA,SAAS,GAAG;AACR,cAAI,KAAKV,SAAT,EAAoB;AAChB,iBAAKA,SAAL,CAAeW,GAAf,CAAmBjB,aAAa,CAACY,aAAjC,EAAgD,KAAKC,cAArD,EAAqE,IAArE;;AACA,iBAAKP,SAAL,CAAeW,GAAf,CAAmBjB,aAAa,CAACc,WAAjC,EAA8C,KAAKC,YAAnD,EAAiE,IAAjE;AACH;AACJ;AAED;AACJ;AACA;;;AACYF,QAAAA,cAAc,CAACK,YAAD,EAA2BC,aAA3B,EAAsDC,OAAtD,EAAkF;AACpGX,UAAAA,OAAO,CAACY,GAAR,CAAY,0BAAZ,EAAwCF,aAAa,CAACG,IAAd,CAAmBC,IAA3D,EADoG,CAGpG;;AACA,cAAIJ,aAAa,CAACG,IAAd,CAAmBC,IAAnB,CAAwBC,QAAxB,CAAiC,UAAjC,KAAgDL,aAAa,CAACG,IAAd,CAAmBC,IAAnB,CAAwBC,QAAxB,CAAiC,MAAjC,CAApD,EAA8F;AAC1F,iBAAKC,wBAAL,CAA8BL,OAA9B;AACH;AACJ;AAED;AACJ;AACA;;;AACYL,QAAAA,YAAY,CAACG,YAAD,EAA2BC,aAA3B,EAAsDC,OAAtD,EAAkF,CAClG;AACH;AAED;AACJ;AACA;;;AACYK,QAAAA,wBAAwB,CAACL,OAAD,EAA6B;AACzD;AACA,gBAAMM,MAAM,GAAGN,OAAO,CAACO,gBAAR,GAA2BD,MAA1C,CAFyD,CAIzD;;AACA,gBAAME,cAAc,GAAG,IAAI3B,IAAJ,CAAS,CAACyB,MAAM,CAACG,CAAR,GAAY,KAAKC,WAA1B,EAAuC,CAACJ,MAAM,CAACK,CAAR,GAAY,KAAKD,WAAxD,CAAvB,CALyD,CAOzD;;AACA,eAAKzB,UAAL,CAAgB2B,kBAAhB,CAAmCJ,cAAnC,EAAmD,KAAKvB,UAAL,CAAgB4B,cAAhB,EAAnD,EAAqF,IAArF;AACH;;AAjE2C,O,8EAC3C9B,Q;;;;;iBACqB,G","sourcesContent":["import { _decorator, Component, Node, RigidBody2D, Collider2D, Contact2DType, IPhysics2DContact, Vec2 } from 'cc';\nimport { PhysicsSystem2D } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('PhysicsCollision')\nexport class PhysicsCollision extends Component {\n    @property\n    bounceForce: number = 100; // 碰撞反弹力\n\n    private _rigidBody: RigidBody2D = null!;\n    private _collider: Collider2D = null!;\n\n    start() {\n        // 获取刚体组件\n        this._rigidBody = this.getComponent(RigidBody2D)!;\n        if (!this._rigidBody) {\n            console.error('PhysicsCollision requires RigidBody2D component');\n            return;\n        }\n\n        // 获取碰撞体组件\n        this._collider = this.getComponent(Collider2D)!;\n        if (!this._collider) {\n            console.error('PhysicsCollision requires Collider2D component');\n            return;\n        }\n\n        // 设置碰撞回调\n        this._collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\n        this._collider.on(Contact2DType.END_CONTACT, this.onEndContact, this);\n    }\n\n    onDestroy() {\n        if (this._collider) {\n            this._collider.off(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\n            this._collider.off(Contact2DType.END_CONTACT, this.onEndContact, this);\n        }\n    }\n\n    /**\n     * 碰撞开始回调\n     */\n    private onBeginContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact) {\n        console.log('Collision detected with:', otherCollider.node.name);\n        \n        // 如果是与边界碰撞，可以添加反弹效果\n        if (otherCollider.node.name.includes('boundary') || otherCollider.node.name.includes('wall')) {\n            this._handleBoundaryCollision(contact);\n        }\n    }\n\n    /**\n     * 碰撞结束回调\n     */\n    private onEndContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact) {\n        // 可以在这里处理碰撞结束的逻辑\n    }\n\n    /**\n     * 处理边界碰撞\n     */\n    private _handleBoundaryCollision(contact: IPhysics2DContact) {\n        // 获取碰撞法向量\n        const normal = contact.getWorldManifold().normal;\n        \n        // 计算反弹速度\n        const bounceVelocity = new Vec2(-normal.x * this.bounceForce, -normal.y * this.bounceForce);\n        \n        // 应用反弹力\n        this._rigidBody.applyLinearImpulse(bounceVelocity, this._rigidBody.getWorldCenter(), true);\n    }\n} "]}