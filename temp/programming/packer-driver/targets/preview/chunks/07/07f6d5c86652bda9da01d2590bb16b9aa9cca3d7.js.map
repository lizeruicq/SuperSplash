{"version":3,"sources":["file:///Users/zeruili/projects/cocos_project/driftClash/assets/scripts/GameHUD.ts"],"names":["_decorator","Component","Node","Label","ProgressBar","GameManager","ccclass","property","GameHUD","updateTimer","gameManager","aiRatioLabels","Map","onLoad","start","getInstance","console","error","initializeAIRatioDisplay","update","deltaTime","updateInterval","updateCountdownDisplay","updatePaintRatioDisplay","countdownLabel","formattedTime","getFormattedRemainingTime","string","remainingTime","getRemainingTime","color","lerp","constructor","allRatios","getAllVehiclePaintRatios","playerRatio","updatePlayerRatioDisplay","updateAIRatiosDisplay","ratio","percentage","Math","round","playerRatioLabel","playerRatioBar","progress","_allRatios","sortedRatios","getSortedVehiclePaintRatios","aiRatios","filter","item","vehicleId","forEach","ratioData","index","updateAIRatioItem","label","get","aiRatiosContainer","labelNode","addComponent","fontSize","addChild","set","setPosition","displayName","getAIDisplayName","startsWith","parts","split","length","warn","clear","removeAllChildren","resetHUD"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Label, ProgressBar } from 'cc';\nconst { ccclass, property } = _decorator;\nimport { GameManager } from './GameManager';\n\n/**\n * 游戏内HUD界面\n * 显示倒计时和颜料占比信息\n */\n@ccclass('GameHUD')\nexport class GameHUD extends Component {\n    \n    // 倒计时显示\n    @property(Label)\n    countdownLabel: Label = null!;\n    \n    // 玩家颜料占比显示\n    @property(Label)\n    playerRatioLabel: Label = null!;\n    \n    @property(ProgressBar)\n    playerRatioBar: ProgressBar = null!;\n    \n    // AI颜料占比显示区域\n    @property(Node)\n    aiRatiosContainer: Node = null!;\n    \n    // 更新频率控制\n    @property\n    updateInterval: number = 0.1; // 每0.1秒更新一次\n    \n    private updateTimer: number = 0;\n    private gameManager: GameManager = null!;\n    \n    // AI占比显示组件缓存\n    private aiRatioLabels: Map<string, Label> = new Map();\n\n    onLoad() {\n        this.updateTimer = 0;\n    }\n\n    start() {\n        this.gameManager = GameManager.getInstance();\n        if (!this.gameManager) {\n            console.error('GameHUD: GameManager未找到');\n            return;\n        }\n        \n        // 初始化AI占比显示\n        this.initializeAIRatioDisplay();\n    }\n\n    update(deltaTime: number) {\n        if (!this.gameManager) return;\n        \n        this.updateTimer += deltaTime;\n        \n        // 按设定频率更新UI\n        if (this.updateTimer >= this.updateInterval) {\n            this.updateCountdownDisplay();\n            this.updatePaintRatioDisplay();\n            this.updateTimer = 0;\n        }\n    }\n\n    /**\n     * 更新倒计时显示\n     */\n    private updateCountdownDisplay(): void {\n        if (this.countdownLabel) {\n            const formattedTime = this.gameManager.getFormattedRemainingTime();\n            this.countdownLabel.string = formattedTime;\n            \n            // 当时间少于30秒时，可以改变颜色提醒\n            const remainingTime = this.gameManager.getRemainingTime();\n            if (remainingTime <= 30) {\n                this.countdownLabel.color = this.countdownLabel.color.lerp(\n                    new (this.countdownLabel.color.constructor as any)(255, 0, 0, 255),\n                    0.5\n                );\n            }\n        }\n    }\n\n    /**\n     * 更新颜料占比显示\n     */\n    private updatePaintRatioDisplay(): void {\n        const allRatios = this.gameManager.getAllVehiclePaintRatios();\n        \n        // 更新玩家占比\n        const playerRatio = allRatios['player'] || 0;\n        this.updatePlayerRatioDisplay(playerRatio);\n        \n        // 更新AI占比\n        this.updateAIRatiosDisplay(allRatios);\n    }\n\n    /**\n     * 更新玩家占比显示\n     * @param ratio 占比（0-1）\n     */\n    private updatePlayerRatioDisplay(ratio: number): void {\n        const percentage = Math.round(ratio * 100);\n        \n        if (this.playerRatioLabel) {\n            this.playerRatioLabel.string = `玩家: ${percentage}%`;\n        }\n        \n        if (this.playerRatioBar) {\n            this.playerRatioBar.progress = ratio;\n        }\n    }\n\n    /**\n     * 更新AI占比显示\n     * @param allRatios 所有车辆的占比\n     */\n    private updateAIRatiosDisplay(_allRatios: { [vehicleId: string]: number }): void {\n        // 获取排序后的占比数据\n        const sortedRatios = this.gameManager.getSortedVehiclePaintRatios();\n        \n        // 只显示AI车辆（排除玩家）\n        const aiRatios = sortedRatios.filter(item => item.vehicleId !== 'player');\n        \n        // 更新每个AI的显示\n        aiRatios.forEach((ratioData, index) => {\n            this.updateAIRatioItem(ratioData.vehicleId, ratioData.ratio, index);\n        });\n    }\n\n    /**\n     * 更新单个AI的占比显示\n     * @param vehicleId AI车辆ID\n     * @param ratio 占比\n     * @param index 显示索引\n     */\n    private updateAIRatioItem(vehicleId: string, ratio: number, index: number): void {\n        const percentage = Math.round(ratio * 100);\n        \n        // 获取或创建标签\n        let label = this.aiRatioLabels.get(vehicleId);\n        if (!label && this.aiRatiosContainer) {\n            // 创建新的标签节点\n            const labelNode = new Node(`AI_${vehicleId}_Label`);\n            label = labelNode.addComponent(Label);\n            label.fontSize = 20;\n            this.aiRatiosContainer.addChild(labelNode);\n            this.aiRatioLabels.set(vehicleId, label);\n            \n            // 设置位置\n            labelNode.setPosition(0, -index * 30, 0);\n        }\n        \n        if (label) {\n            // 简化AI显示名称\n            const displayName = this.getAIDisplayName(vehicleId);\n            label.string = `${displayName}: ${percentage}%`;\n        }\n    }\n\n    /**\n     * 获取AI的显示名称\n     * @param vehicleId AI车辆ID\n     * @returns 显示名称\n     */\n    private getAIDisplayName(vehicleId: string): string {\n        // 从vehicleId中提取简化的显示名称\n        if (vehicleId.startsWith('ai_')) {\n            const parts = vehicleId.split('_');\n            if (parts.length >= 2) {\n                return `AI-${parts[1]}`;\n            }\n        }\n        return vehicleId;\n    }\n\n    /**\n     * 初始化AI占比显示\n     */\n    private initializeAIRatioDisplay(): void {\n        if (!this.aiRatiosContainer) {\n            console.warn('GameHUD: AI占比容器未设置');\n            return;\n        }\n        \n        // 清空现有的AI显示\n        this.aiRatioLabels.clear();\n        \n        // 移除所有子节点\n        this.aiRatiosContainer.removeAllChildren();\n    }\n\n    /**\n     * 重置HUD显示\n     */\n    public resetHUD(): void {\n        if (this.countdownLabel) {\n            this.countdownLabel.string = \"02:00\";\n            this.countdownLabel.color = new (this.countdownLabel.color.constructor as any)(255, 255, 255, 255);\n        }\n        \n        if (this.playerRatioLabel) {\n            this.playerRatioLabel.string = \"玩家: 0%\";\n        }\n        \n        if (this.playerRatioBar) {\n            this.playerRatioBar.progress = 0;\n        }\n        \n        this.initializeAIRatioDisplay();\n    }\n}\n"]}