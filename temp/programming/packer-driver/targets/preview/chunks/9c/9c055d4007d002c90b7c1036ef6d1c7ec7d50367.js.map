{"version":3,"sources":["file:///Users/zeruili/projects/cocos_project/driftClash/assets/scripts/PaintManager.ts"],"names":["_decorator","Component","Node","instantiate","Vec2","Layers","ccclass","property","PaintManager","paintMap","Map","paintContainer","getInstance","_instance","onLoad","console","log","node","destroy","layer","Enum","UI_2D","addChild","onDestroy","addPaint","paintPrefab","worldPosition","ownerId","warn","position2D","x","y","checkAndRemoveOverlappingPaint","paintNode","setWorldPosition","paintId","generatePaintId","paintData","position","timestamp","Date","now","set","toFixed","newPosition","newOwnerId","toRemove","forEach","distance","coverageRadius","push","removePaint","length","get","isValid","delete","clearAllPaint","clear","getPaintCountByOwner","count","getTotalPaintCount","size","getPaintRatioByOwner","totalCount","ownerCount","getAllPaintRatios","ratios","ownerCounts","getSortedPaintRatios","result","ratio","sort","a","b"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Prefab, instantiate, Vec2, Vec3, Layers } from 'cc';\nconst { ccclass, property } = _decorator;\n\n/**\n * 颜料数据接口\n */\ninterface PaintData {\n    node: Node;           // 颜料节点\n    position: Vec2;       // 位置\n    ownerId: string;      // 拥有者ID（车辆ID）\n    timestamp: number;    // 创建时间戳\n}\n\n/**\n * 颜料管理器\n * 负责管理游戏中所有车辆喷洒的颜料\n */\n@ccclass('PaintManager')\nexport class PaintManager extends Component {\n    private static _instance: PaintManager = null!;\n    \n    // 存储所有颜料的数据\n    private paintMap: Map<string, PaintData> = new Map();\n    \n    // 颜料覆盖检测的距离阈值（像素）\n    @property\n    coverageRadius: number = 30;\n    \n    // 颜料容器节点\n    private paintContainer: Node = null!;\n\n    public static getInstance(): PaintManager {\n        return PaintManager._instance;\n    }\n\n    onLoad() {\n        if (PaintManager._instance) {\n            console.log(\"销毁原有PaintManager单例\");\n            this.node.destroy();\n            return;\n        }\n        PaintManager._instance = this;\n        \n        // 创建颜料容器节点\n        this.paintContainer = new Node('PaintContainer');\n\n        // 设置容器节点的层级为UI_2D，确保颜料固定在游戏世界坐标中\n        this.paintContainer.layer = Layers.Enum.UI_2D;\n\n        this.node.addChild(this.paintContainer);\n        \n        console.log('PaintManager初始化完成');\n    }\n\n    onDestroy() {\n        if (PaintManager._instance === this) {\n            PaintManager._instance = null!;\n            console.log(\"PaintManager实例已销毁\");\n        }\n    }\n\n    /**\n     * 添加颜料\n     * @param paintPrefab 颜料预制体\n     * @param worldPosition 世界坐标位置\n     * @param ownerId 拥有者ID\n     */\n    public addPaint(paintPrefab: Prefab, worldPosition: Vec3, ownerId: string): void {\n        if (!paintPrefab || !this.paintContainer) {\n            console.warn('PaintManager: 颜料预制体或容器为空');\n            return;\n        }\n\n        const position2D = new Vec2(worldPosition.x, worldPosition.y);\n        \n        // 检查是否需要覆盖现有颜料\n        this.checkAndRemoveOverlappingPaint(position2D, ownerId);\n        \n        // 创建新颜料节点\n        const paintNode = instantiate(paintPrefab);\n        paintNode.setWorldPosition(worldPosition);\n\n        // 设置颜料节点的层级为UI_2D，确保它固定在游戏世界坐标中\n        paintNode.layer = Layers.Enum.UI_2D;\n\n        this.paintContainer.addChild(paintNode);\n        \n        // 生成唯一ID\n        const paintId = this.generatePaintId(position2D, ownerId);\n        \n        // 存储颜料数据\n        const paintData: PaintData = {\n            node: paintNode,\n            position: position2D,\n            ownerId: ownerId,\n            timestamp: Date.now()\n        };\n        \n        this.paintMap.set(paintId, paintData);\n        \n        console.log(`添加颜料: 拥有者=${ownerId}, 位置=(${position2D.x.toFixed(1)}, ${position2D.y.toFixed(1)})`);\n    }\n\n    /**\n     * 检查并移除重叠的颜料\n     * @param newPosition 新颜料位置\n     * @param newOwnerId 新颜料拥有者ID\n     */\n    private checkAndRemoveOverlappingPaint(newPosition: Vec2, newOwnerId: string): void {\n        const toRemove: string[] = [];\n        \n        this.paintMap.forEach((paintData, paintId) => {\n            const distance = Vec2.distance(paintData.position, newPosition);\n            \n            // 如果距离小于覆盖半径，且不是同一个拥有者，则移除旧颜料\n            if (distance < this.coverageRadius && paintData.ownerId !== newOwnerId) {\n                toRemove.push(paintId);\n            }\n        });\n        \n        // 移除重叠的颜料\n        toRemove.forEach(paintId => {\n            this.removePaint(paintId);\n        });\n        \n        if (toRemove.length > 0) {\n            console.log(`移除了 ${toRemove.length} 个重叠的颜料`);\n        }\n    }\n\n    /**\n     * 移除指定的颜料\n     * @param paintId 颜料ID\n     */\n    private removePaint(paintId: string): void {\n        const paintData = this.paintMap.get(paintId);\n        if (paintData) {\n            // 销毁节点\n            if (paintData.node && paintData.node.isValid) {\n                paintData.node.destroy();\n            }\n            \n            // 从映射中移除\n            this.paintMap.delete(paintId);\n        }\n    }\n\n    /**\n     * 生成颜料唯一ID\n     * @param position 位置\n     * @param ownerId 拥有者ID\n     * @returns 唯一ID\n     */\n    private generatePaintId(position: Vec2, ownerId: string): string {\n        const timestamp = Date.now();\n        return `paint_${ownerId}_${position.x.toFixed(0)}_${position.y.toFixed(0)}_${timestamp}`;\n    }\n\n    /**\n     * 清除所有颜料\n     */\n    public clearAllPaint(): void {\n        this.paintMap.forEach((paintData) => {\n            if (paintData.node && paintData.node.isValid) {\n                paintData.node.destroy();\n            }\n        });\n        \n        this.paintMap.clear();\n        console.log('清除了所有颜料');\n    }\n\n    /**\n     * 获取指定拥有者的颜料数量\n     * @param ownerId 拥有者ID\n     * @returns 颜料数量\n     */\n    public getPaintCountByOwner(ownerId: string): number {\n        let count = 0;\n        this.paintMap.forEach((paintData) => {\n            if (paintData.ownerId === ownerId) {\n                count++;\n            }\n        });\n        return count;\n    }\n\n    /**\n     * 获取总颜料数量\n     * @returns 总数量\n     */\n    public getTotalPaintCount(): number {\n        return this.paintMap.size;\n    }\n\n    /**\n     * 获取指定拥有者的颜料占比\n     * @param ownerId 拥有者ID\n     * @returns 占比（0-1之间的小数）\n     */\n    public getPaintRatioByOwner(ownerId: string): number {\n        const totalCount = this.getTotalPaintCount();\n        if (totalCount === 0) {\n            return 0;\n        }\n\n        const ownerCount = this.getPaintCountByOwner(ownerId);\n        return ownerCount / totalCount;\n    }\n\n    /**\n     * 获取所有车辆的颜料占比\n     * @returns 包含每个车辆ID和其占比的对象\n     */\n    public getAllPaintRatios(): { [ownerId: string]: number } {\n        const ratios: { [ownerId: string]: number } = {};\n        const totalCount = this.getTotalPaintCount();\n\n        if (totalCount === 0) {\n            return ratios;\n        }\n\n        // 统计每个拥有者的颜料数量\n        const ownerCounts: { [ownerId: string]: number } = {};\n        this.paintMap.forEach((paintData) => {\n            const ownerId = paintData.ownerId;\n            ownerCounts[ownerId] = (ownerCounts[ownerId] || 0) + 1;\n        });\n\n        // 计算占比\n        for (const ownerId in ownerCounts) {\n            ratios[ownerId] = ownerCounts[ownerId] / totalCount;\n        }\n\n        return ratios;\n    }\n\n    /**\n     * 获取排序后的颜料占比（从高到低）\n     * @returns 按占比排序的数组，每个元素包含ownerId和ratio\n     */\n    public getSortedPaintRatios(): Array<{ ownerId: string, ratio: number, count: number }> {\n        const ratios = this.getAllPaintRatios();\n        const result: Array<{ ownerId: string, ratio: number, count: number }> = [];\n\n        for (const ownerId in ratios) {\n            result.push({\n                ownerId: ownerId,\n                ratio: ratios[ownerId],\n                count: this.getPaintCountByOwner(ownerId)\n            });\n        }\n\n        // 按占比从高到低排序\n        result.sort((a, b) => b.ratio - a.ratio);\n\n        return result;\n    }\n}\n"]}