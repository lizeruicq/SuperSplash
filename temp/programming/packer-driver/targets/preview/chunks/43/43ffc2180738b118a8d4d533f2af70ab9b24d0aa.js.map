{"version":3,"sources":["file:///Users/zeruili/projects/cocos_project/driftClash/assets/scripts/player.ts"],"names":["_decorator","Component","input","Input","KeyCode","Vec2","Vec3","RigidBody2D","ERigidBody2DType","Contact2DType","BoxCollider2D","Sprite","SpriteFrame","tween","AIPlayer","GameManager","ccclass","property","player","_rigidBody","_direction","_accel","_angle","_targetAngle","_lastValidPosition","_currentHealth","_isDestroyed","_originalSprite","_destroyAnimationSpeed","onLoad","maxHealth","onEnable","on","EventType","KEY_DOWN","onKeyDown","KEY_UP","onKeyUp","onDisable","off","onDestroy","collider","getComponent","BEGIN_CONTACT","onBeginContact","start","node","isValid","console","error","type","Dynamic","allowSleep","gravityScale","linearDamping","angularDamping","fixedRotation","worldPosition","x","y","initAngle","setRotationFromEuler","sprite","spriteFrame","log","event","keyCode","ARROW_UP","ARROW_DOWN","ARROW_LEFT","ARROW_RIGHT","update","deltaTime","currentVelocity","linearVelocity","currentSpeed","length","currentPos","turnAmount","turnSpeed","angleDiff","Math","abs","rad","PI","force","cos","acceleration","sin","applyForce","forward","dot","brakeForce","clone","multiplyScalar","brakeDeceleration","reverseForce","frictionForce","friction","maxSpeed","normalizedVelocity","normalize","distanceToLastPos","distance","setWorldPosition","z","ZERO","init","angle","getRigidBody","selfCollider","otherCollider","contact","name","otherNode","aiPlayer","mySpeed","aiRigidBody","aiSpeed","damageFactor","aiDamage","round","playerDamage","takeDamage","recoilForce","boundaryDamage","damage","max","gameManager","getInstance","syncPlayerHealth","destroyVehicle","destroyedSprite","disableInput","startDestroyAnimation","scheduleRemoveNode","scheduleOnce","removeVehicleNode","removeDelay","removeFromParent","to","scale","getCurrentHealth","getMaxHealth","isDestroyed","restoreVehicle","unschedule","setScale"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, input, Input, EventKeyboard, KeyCode, Vec2, Vec3, RigidBody2D, ERigidBody2DType, Contact2DType, Collider2D, IPhysics2DContact, BoxCollider2D, Sprite, SpriteFrame, tween } from 'cc';\nconst { ccclass, property } = _decorator;\nimport { AIPlayer } from './AIPlayer';\nimport { GameManager } from './GameManager';\n\n@ccclass('player')\nexport class player extends Component {\n    @property\n    maxSpeed: number = 50; // 最大速度（像素/秒）\n    @property\n    acceleration: number = 50; // 加速度（像素/秒²）\n    @property\n    brakeDeceleration: number = 200; // 刹车减速度\n    @property\n    turnSpeed: number = 200; // 转向速度（度/秒）\n    @property\n    friction: number = 1.5; // 摩擦力系数\n    @property\n    initAngle: number = 0; // 初始角度（度），可由外部设置\n\n    @property\n    maxHealth: number = 200; // 最大生命值\n\n    @property(SpriteFrame)\n    destroyedSprite: SpriteFrame = null!; // 摧毁状态的精灵图\n\n    @property\n    removeDelay: number = 3.0; // 摧毁后移除节点的延迟时间（秒）\n\n    protected _rigidBody: RigidBody2D = null!;\n    private _direction: number = 0; // -1:左, 0:不转, 1:右\n    private _accel: number = 0; // -1:刹车, 0:无, 1:加速\n    private _angle: number = -90; // 车辆朝向角度（度）\n    private _targetAngle: number = -90; // 目标角度\n    private _lastValidPosition: Vec2 = new Vec2(); // 上次有效位置\n\n    // 生命值和摧毁相关\n    private _currentHealth: number = 100; // 当前生命值\n    private _isDestroyed: boolean = false; // 是否已摧毁\n    private _originalSprite: SpriteFrame = null!; // 原始精灵图\n    private _destroyAnimationSpeed: number = 0.95; // 摧毁动画速度衰减系数\n\n    onLoad() {\n        // 确保在组件加载时初始化\n        this._rigidBody = null!;\n        this._direction = 0;\n        this._accel = 0;\n        this._angle = -90;\n        this._targetAngle = -90;\n        this._lastValidPosition = new Vec2();\n\n        // 初始化生命值和摧毁状态\n        this._currentHealth = this.maxHealth;\n        this._isDestroyed = false;\n    }\n\n    onEnable() {\n        input.on(Input.EventType.KEY_DOWN, this.onKeyDown, this);\n        input.on(Input.EventType.KEY_UP, this.onKeyUp, this);\n    }\n\n    onDisable() {\n        input.off(Input.EventType.KEY_DOWN, this.onKeyDown, this);\n        input.off(Input.EventType.KEY_UP, this.onKeyUp, this);\n    }\n\n    onDestroy() {\n        // 确保在组件销毁时清理所有事件监听\n        input.off(Input.EventType.KEY_DOWN, this.onKeyDown, this);\n        input.off(Input.EventType.KEY_UP, this.onKeyUp, this);\n        \n        // 清理刚体引用\n        this._rigidBody = null!;\n        // 注销碰撞回调\n        const collider = this.getComponent(BoxCollider2D);\n        if (collider) {\n            collider.off(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\n        }\n    }\n\n    start() {\n        // 获取刚体组件\n        this._rigidBody = this.getComponent(RigidBody2D)!;\n        if (!this._rigidBody || !this.node || !this.node.isValid) {\n            console.error('player requires RigidBody2D component and valid node');\n            return;\n        }\n\n        // 设置刚体属性\n        this._rigidBody.type = ERigidBody2DType.Dynamic;\n        this._rigidBody.allowSleep = false; // 不允许休眠\n        this._rigidBody.gravityScale = 0; // 无重力\n        this._rigidBody.linearDamping = 0.3; // 降低线性阻尼\n        this._rigidBody.angularDamping = 0.9; // 增加角阻尼防止过度旋转\n        this._rigidBody.fixedRotation = true; // 固定旋转，手动控制\n\n        // 记录初始位置\n        this._lastValidPosition = new Vec2(this.node.worldPosition.x, this.node.worldPosition.y);\n\n        // 设置初始角度\n        this._angle = this.initAngle;\n        this._targetAngle = this.initAngle;\n        this.node.setRotationFromEuler(0, 0, this.initAngle);\n\n        // 保存原始精灵图\n        const sprite = this.getComponent(Sprite);\n        if (sprite && sprite.spriteFrame) {\n            this._originalSprite = sprite.spriteFrame;\n        }\n\n        // 注册碰撞回调\n        const collider = this.getComponent(BoxCollider2D);\n        if (collider) {\n            console.log('BoxCollider2D component found and registered');\n            collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\n        } else {\n            console.error('BoxCollider2D component not found');\n        }\n    }\n\n    onKeyDown(event: EventKeyboard) {\n        switch (event.keyCode) {\n            case KeyCode.ARROW_UP:\n                this._accel = 1;\n                break;\n            case KeyCode.ARROW_DOWN:\n                this._accel = -1;\n                break;\n            case KeyCode.ARROW_LEFT:\n                this._direction = -1;\n                break;\n            case KeyCode.ARROW_RIGHT:\n                this._direction = 1;\n                break;\n        }\n    }\n\n    onKeyUp(event: EventKeyboard) {\n        switch (event.keyCode) {\n            case KeyCode.ARROW_UP:\n                if (this._accel === 1) this._accel = 0;\n                break;\n            case KeyCode.ARROW_DOWN:\n                if (this._accel === -1) this._accel = 0;\n                break;\n            case KeyCode.ARROW_LEFT:\n                if (this._direction === -1) this._direction = 0;\n                break;\n            case KeyCode.ARROW_RIGHT:\n                if (this._direction === 1) this._direction = 0;\n                break;\n        }\n    }\n\n    update(deltaTime: number) {\n        if (!this._rigidBody || !this.node || !this.node.isValid) return;\n\n        // 如果车辆已摧毁，执行摧毁动画逻辑\n        if (this._isDestroyed) {\n            // this.updateDestroyAnimation();\n            return;\n        }\n\n        // 获取当前速度和位置\n        const currentVelocity = this._rigidBody.linearVelocity;\n        const currentSpeed = currentVelocity.length();\n        const currentPos = new Vec2(this.node.worldPosition.x, this.node.worldPosition.y);\n\n        // 更新目标角度（转向）\n        if (this._direction !== 0) {\n            const turnAmount = this.turnSpeed * deltaTime * this._direction;\n            this._targetAngle -= turnAmount;\n        }\n\n        // 平滑角度插值，防止突然转向\n        const angleDiff = this._targetAngle - this._angle;\n        if (Math.abs(angleDiff) > 0.1) {\n            this._angle += angleDiff * 0.1; // 平滑插值\n        } else {\n            this._angle = this._targetAngle;\n        }\n\n        // 设置节点旋转\n        this.node.setRotationFromEuler(0, 0, this._angle);\n\n        // 前进\n        if (this._accel === 1) {\n            // 正常加速\n            const rad = (this._angle + 90) * Math.PI / 180;\n            const force = new Vec2(\n                Math.cos(rad) * this.acceleration,\n                Math.sin(rad) * this.acceleration\n            );\n            this._rigidBody.applyForce(force, currentPos, true);\n        }\n        // 刹车\n        else if (this._accel === -1) {\n            // 如果当前速度方向与车辆朝向一致，施加反向力（刹车）\n            const rad = (this._angle + 90) * Math.PI / 180;\n            const forward = new Vec2(Math.cos(rad), Math.sin(rad));\n            const dot = currentVelocity.dot(forward);\n            \n            if (dot > 0) {\n                // 施加强力反向力（刹车）\n                const brakeForce = forward.clone().multiplyScalar(-this.brakeDeceleration);\n                this._rigidBody.applyForce(brakeForce, currentPos, true);\n            } else {\n                // 允许倒车\n                const reverseForce = forward.clone().multiplyScalar(-this.acceleration * 0.5);\n                this._rigidBody.applyForce(reverseForce, currentPos, true);\n            }\n        }\n        // 松开加速/刹车键\n        else {\n            // 增大摩擦力，让车辆更快停下来\n            if (currentSpeed > 1) {\n                const frictionForce = currentVelocity.clone().multiplyScalar(-this.friction * 2); // 2倍摩擦\n                this._rigidBody.applyForce(frictionForce, currentPos, true);\n            }\n        }\n\n        // 限制最大速度\n        if (currentSpeed > this.maxSpeed) {\n            const normalizedVelocity = currentVelocity.clone().normalize();\n            this._rigidBody.linearVelocity = normalizedVelocity.multiplyScalar(this.maxSpeed);\n        }\n\n        // 防止车辆卡住或异常位置\n        if (currentSpeed < 0.1) {\n            // 如果速度很小，重置到上次有效位置附近\n            const distanceToLastPos = Vec2.distance(currentPos, this._lastValidPosition);\n            if (distanceToLastPos > 50) { // 如果偏离太远\n                this.node.setWorldPosition(this._lastValidPosition.x, this._lastValidPosition.y, this.node.worldPosition.z);\n                this._rigidBody.linearVelocity = Vec2.ZERO;\n            }\n        } else {\n            // 更新有效位置\n            this._lastValidPosition = currentPos.clone();\n        }\n\n        // 防止车辆旋转过度\n        if (Math.abs(this._angle) > 360) {\n            this._angle = this._angle % 360;\n            this._targetAngle = this._targetAngle % 360;\n        }\n    }\n\n    public init(angle: number) {\n        this.initAngle = angle;\n        this._angle = angle;\n        this._targetAngle = angle;\n        this.node.setRotationFromEuler(0, 0, angle);\n    }\n\n    /**\n     * 获取玩家车辆的刚体组件\n     */\n    public getRigidBody(): RigidBody2D {\n        return this._rigidBody;\n    }\n\n    /**\n     * 玩家车辆与AI车辆碰撞时，按双方速度造成伤害\n     */\n    onBeginContact(selfCollider: BoxCollider2D, otherCollider: BoxCollider2D, contact: IPhysics2DContact | null) {\n        console.log('玩家车辆发生碰撞，碰撞对象:', otherCollider.node.name);\n        // 判断对方是否为AI车辆\n        const otherNode = otherCollider.node;\n        const aiPlayer = otherNode.getComponent(AIPlayer);\n        if (aiPlayer) {\n            console.log('碰撞对象是AI车辆:', otherNode.name);\n            // 获取双方速度\n            const mySpeed = this._rigidBody.linearVelocity.length();\n            const aiRigidBody = aiPlayer.node.getComponent(RigidBody2D);\n            const aiSpeed = aiRigidBody ? aiRigidBody.linearVelocity.length() : 0;\n            // 伤害计算：对方受到我速度*系数的伤害，我受到对方速度*系数的伤害\n            const damageFactor = 0.5; // 可调节\n            const aiDamage = Math.round(mySpeed * damageFactor);\n            const playerDamage = Math.round(aiSpeed * damageFactor);\n            // 造成伤害\n            aiPlayer.takeDamage(aiDamage);\n            \n            // 施加反作用力\n            const recoilForce = new Vec2(this._rigidBody.linearVelocity.x, this._rigidBody.linearVelocity.y);\n            recoilForce.normalize(); // 归一化方向\n            recoilForce.multiplyScalar(-mySpeed * 0.05); // 根据速度大小施加反作用力\n            this._rigidBody.linearVelocity = recoilForce;\n            \n            this.takeDamage(playerDamage);\n        }\n        \n        // 检测与地图边界的碰撞\n        else {\n            const mySpeed = this._rigidBody.linearVelocity.length();\n            const damageFactor = 0.3; // 地图边界碰撞的伤害系数\n            const boundaryDamage = Math.round(mySpeed * damageFactor);\n            console.log(`玩家车辆与地图边界碰撞，速度: ${mySpeed}, 伤害: ${boundaryDamage}`);\n            \n            // 施加反作用力\n            const recoilForce = new Vec2(this._rigidBody.linearVelocity.x, this._rigidBody.linearVelocity.y);\n            recoilForce.normalize(); // 归一化方向\n            recoilForce.multiplyScalar(-mySpeed * 0.05); // 根据速度大小施加反作用力\n            this._rigidBody.linearVelocity = recoilForce;\n            \n            this.takeDamage(boundaryDamage);\n        }\n    }\n\n    // ==================== 生命值和摧毁系统 ====================\n\n    /**\n     * 受到伤害\n     */\n    public takeDamage(damage: number) {\n        if (this._isDestroyed) return;\n\n        this._currentHealth = Math.max(0, this._currentHealth - damage);\n        console.log(`玩家受到伤害: ${damage}, 剩余生命值: ${this._currentHealth}`);\n\n        // 同步GameManager中的玩家血量显示\n        const gameManager = GameManager.getInstance();\n        if (gameManager) {\n            gameManager.syncPlayerHealth();\n        }\n\n        // 检查是否死亡\n        if (this._currentHealth <= 0) {\n            this.destroyVehicle();\n        }\n    }\n\n    /**\n     * 摧毁车辆\n     */\n    private destroyVehicle() {\n        if (this._isDestroyed) return;\n\n        this._isDestroyed = true;\n        console.log('玩家车辆被摧毁！');\n\n        // 切换到摧毁状态的精灵图\n        if (this.destroyedSprite) {\n            const sprite = this.getComponent(Sprite);\n            if (sprite) {\n                sprite.spriteFrame = this.destroyedSprite;\n            }\n        }\n\n        // 禁用输入控制\n        this.disableInput();\n\n        // 开始摧毁动画\n        this.startDestroyAnimation();\n\n        // 玩家摧毁时可以触发游戏结束\n        const gameManager = GameManager.getInstance();\n        if (gameManager) {\n            // 可以在这里调用游戏结束逻辑\n            // gameManager.gameOver(false); // false表示玩家失败\n        }\n\n        // 延迟移除节点（可选，通常玩家车辆不移除）\n        // this.scheduleRemoveNode();\n    }\n\n    /**\n     * 禁用输入控制\n     */\n    private disableInput() {\n        input.off(Input.EventType.KEY_DOWN, this.onKeyDown, this);\n        input.off(Input.EventType.KEY_UP, this.onKeyUp, this);\n\n        // 重置控制状态\n        this._direction = 0;\n        this._accel = 0;\n    }\n\n    /**\n     * 安排移除节点（可选功能，通常玩家车辆不使用）\n     */\n    private scheduleRemoveNode() {\n        if (this.node && this.node.isValid) {\n            this.scheduleOnce(() => {\n                this.removeVehicleNode();\n            }, this.removeDelay);\n        }\n    }\n\n    /**\n     * 移除车辆节点（可选功能，通常玩家车辆不使用）\n     */\n    private removeVehicleNode() {\n        if (this.node && this.node.isValid) {\n            console.log('移除玩家车辆节点');\n            this.node.removeFromParent();\n        }\n    }\n\n    /**\n     * 开始摧毁动画\n     */\n    private startDestroyAnimation() {\n        // 使用缓动动画让车辆逐渐停止并可能添加一些视觉效果\n        if (this.node) {\n            // 可以添加旋转、缩放等效果\n            tween(this.node)\n                .to(2.0, {\n                    scale: new Vec3(1, 1, 1),  // 稍微缩小\n                    angle: this.node.angle + 180 // 旋转180度\n                })\n                .start();\n        }\n    }\n\n\n\n    // ==================== 公共方法 ====================\n\n    /**\n     * 获取当前生命值\n     */\n    public getCurrentHealth(): number {\n        return this._currentHealth;\n    }\n\n    /**\n     * 获取最大生命值\n     */\n    public getMaxHealth(): number {\n        return this.maxHealth;\n    }\n\n    /**\n     * 是否已摧毁\n     */\n    public isDestroyed(): boolean {\n        return this._isDestroyed;\n    }\n\n    /**\n     * 恢复车辆（用于重新开始游戏）\n     */\n    public restoreVehicle() {\n        // 取消移除节点的计划\n        this.unschedule(this.removeVehicleNode);\n\n        this._isDestroyed = false;\n        this._currentHealth = this.maxHealth;\n\n        // 恢复原始精灵图\n        if (this._originalSprite) {\n            const sprite = this.getComponent(Sprite);\n            if (sprite) {\n                sprite.spriteFrame = this._originalSprite;\n            }\n        }\n\n        // 重新启用输入\n        this.onEnable();\n\n        // 恢复节点状态\n        if (this.node) {\n            this.node.setScale(1, 1);\n            this.node.angle = this.initAngle;\n        }\n\n        // 重置速度\n        if (this._rigidBody) {\n            this._rigidBody.linearVelocity = Vec2.ZERO;\n        }\n\n        console.log('玩家车辆已恢复');\n    }\n}\n\n"]}