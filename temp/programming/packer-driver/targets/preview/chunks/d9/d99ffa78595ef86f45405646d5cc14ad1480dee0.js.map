{"version":3,"sources":["file:///Users/zeruili/projects/cocos_project/driftClash/assets/scripts/GameManager.ts"],"names":["_decorator","Component","Node","Prefab","instantiate","resources","UITransform","director","ProgressBar","Label","Button","TempData","CameraFollow","player","AIController","AIPlayer","PlayerManager","SceneTransition","SoundManager","PaintManager","GameOverPanel","GameHUD","Bullet","ccclass","property","GameState","GameManager","aiPlayers","currentState","RUNNING","gameStartTime","gameEndTime","gameDuration","remainingTime","playerHP","playerMaxHP","enemyCount","initialEnemyCount","playerComponent","paintManager","bulletRoot","getInstance","_instance","onLoad","console","log","node","destroy","start","initializeGame","bindButtonEvents","loadLevelAndCar","update","deltaTime","updateCountdown","onDestroy","Date","now","pausePanel","active","gameOverPanel","gameHUD","resetHUD","pauseButton","on","EventType","CLICK","pauseGame","resumeButton","resumeGame","mainMenuButton","returnToLevelSelect","levelId","selectedLevel","carId","selectedCar","mapNode","playerNode","load","err","prefab","setPosition","playGround","addChild","autoFindAIPlayers","notifyAIControllers","findBulletRoot","length","refreshEnemyCount","err2","prefab2","spawnChildren","spawnPoint","children","randomIndex","Math","floor","random","spawnNode","spawnPos","getWorldPosition","localPos","canvas","getComponent","convertToNodeSpaceAR","setRotation","getRotation","playerScript","init","angle","initializePlayerHealth","indexOf","name","cameraFollow","camera","initializePaintSystem","error","instance","playSoundEffect","scene","getChildByName","sceneNode","carsNode","carNode","aiPlayer","push","getAIPlayers","warn","findNodeRecursively","parent","child","found","aiControllers","getComponentsInChildren","aiController","onScenePrefabLoaded","getMaxHealth","refreshPlayerHealthBar","reducePlayerHP","amount","max","syncPlayerHealth","getCurrentHealth","resetPlayerHealth","restoreVehicle","playerHealthBar","progress","count","enemyCountLabel","string","gameOver","PAUSED","pause","resume","isVictory","GAME_OVER","gameResult","calculateGameResult","gameOverPanelComponent","setGameOverInfo","performance","reward","gameTime","healthPercentage","stars","addMoney","updateLevelProgress","restartGame","loadScene","getScene","gameTimeSec","calculateStars","calculatePerformance","toFixed","playerPaintCount","getPaintCountByOwner","totalPaintCount","getTotalPaintCount","playerRatio","playerPercentage","destroyedAllEnemies","gameTimeMs","currentLevelId","getCurrentState","getGameTime","getPlayerHP","getPlayerMaxHP","getEnemyCount","getComponentInChildren","clearAllPaint","sprayPaint","paintPrefab","worldPosition","vehicleId","addPaint","getAllVehiclePaintRatios","getAllPaintRatios","getSortedVehiclePaintRatios","sorted","getSortedPaintRatios","map","item","ownerId","ratio","getPaintManager","onCountdownFinished","determineWinner","getRemainingTime","getFormattedRemainingTime","totalSeconds","ceil","minutes","seconds","minutesStr","toString","secondsStr","playerShoot","shoot","fireBullet","bulletPrefab","position","direction","shooterId","weaponType","bulletNode","bulletComponent","bulletType","setWorldPosition","getPlayerComponent"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Prefab, instantiate, resources, UITransform, director, ProgressBar, Label, Button, Vec3, Vec2 } from 'cc';\nimport { TempData } from './TempData';\nimport { CameraFollow } from './camera_follow';\nimport { player } from './player';\nimport { AIController } from './AIController';\nimport { AIPlayer } from './AIPlayer';\nimport { PlayerManager } from './PlayerManager';\nimport { SceneTransition } from './SceneTransition';\nimport { SoundManager } from './SoundManager';\nimport { PaintManager } from './PaintManager';\nimport { GameOverPanel } from './GameOverPanel';\nimport { GameHUD } from './GameHUD';\nimport { Bullet, WeaponType } from './Bullet';\n\nconst { ccclass, property } = _decorator;\n\n// 游戏状态枚举\nexport enum GameState {\n    RUNNING = 'running',    // 游戏运行中\n    PAUSED = 'paused',      // 游戏暂停\n    GAME_OVER = 'game_over' // 游戏结束\n}\n\n@ccclass('GameManager')\nexport class GameManager extends Component {\n    @property(Node)\n    playGround: Node = null!; // PlayGround节点\n\n    @property(Node)\n    canvas: Node = null!; // Canvas节点\n\n    @property(Node)\n    spawnPoint: Node = null!; // SpawnPoint节点\n\n    @property(Node)\n    camera: Node = null!; // Camera节点\n\n    @property(ProgressBar)\n    playerHealthBar: ProgressBar = null!; // 玩家血量条\n\n    @property(Label)\n    enemyCountLabel: Label = null!; // 敌人数量Label\n\n    @property(Button)\n    pauseButton: Button = null!; // 暂停按钮\n\n    @property(Node)\n    pausePanel: Node = null!; // 暂停面板\n\n    @property(Node)\n    gameOverPanel: Node = null!; // 游戏结束面板\n\n    @property(Button)\n    resumeButton: Button = null!; // 继续游戏按钮\n\n    // @property(Button)\n    // mainMenuButton2: Button = null!; // \n\n    @property(Button)\n    mainMenuButton: Button = null!; // 返回主菜单按钮\n\n    private static _instance: GameManager = null!;\n    private aiPlayers: AIPlayer[] = [];\n\n    // 游戏状态相关\n    private currentState: GameState = GameState.RUNNING;\n    private gameStartTime: number = 0;\n    private gameEndTime: number = 0;\n\n    // 倒计时相关\n  \n    gameDuration: number = 120; // 游戏时长（秒），默认2分钟\n\n    private remainingTime: number = 120; // 剩余时间\n\n    // 玩家数据\n    private playerHP: number = 0; // 将在player加载完成后初始化\n    private playerMaxHP: number = 0; // 将在player加载完成后初始化\n    private enemyCount: number = 0;\n    private initialEnemyCount: number = 0;\n    private playerComponent: player | null = null; // 玩家组件引用\n\n\n    private paintManager: PaintManager | null = null;\n    // @property(PaintManager)\n    // paintManager: PaintManager = null!;\n\n    // HUD界面\n    @property(GameHUD)\n    gameHUD: GameHUD = null!;\n\n    // 子弹根节点\n    private bulletRoot: Node | null = null;\n\n    // // 游戏结束面板颜料占比显示\n    // @property(Node)\n    // paintRatiosContainer: Node = null!; // 颜料占比显示容器\n\n    // @property(Label)\n    // paintRatiosTitleLabel: Label = null!; // 颜料占比标题\n\n    public static getInstance(): GameManager {\n        return GameManager._instance;\n    }\n\n    onLoad() {\n        if (GameManager._instance) {\n            console.log(\"销毁原有单例\")\n            this.node.destroy();\n            return;\n        }\n        GameManager._instance = this;\n    }\n\n    start() {\n        console.log(\"调用场景内容加载\")\n        this.initializeGame();\n        this.bindButtonEvents();\n        this.loadLevelAndCar();\n    }\n    update(deltaTime: number) {\n        // 只在游戏运行状态下更新倒计时\n        if (this.currentState === GameState.RUNNING) {\n            this.updateCountdown(deltaTime);\n        }\n    }\n\n    onDestroy() {\n         if (GameManager._instance === this) {\n            GameManager._instance = null;\n            console.log(\"GameManager 实例已销毁\");\n        }\n    }\n\n    /**\n     * 初始化游戏\n     */\n    private initializeGame() {\n        this.currentState = GameState.RUNNING;\n        this.gameStartTime = Date.now();\n        this.gameEndTime = 0;\n\n        // 初始化倒计时\n        this.remainingTime = this.gameDuration;\n\n        // 初始化UI面板状态\n        if (this.pausePanel) {\n            this.pausePanel.active = false;\n        }\n        if (this.gameOverPanel) {\n            this.gameOverPanel.active = false;\n        }\n\n       \n\n        // 重置HUD显示\n        if (this.gameHUD) {\n            this.gameHUD.resetHUD();\n        }\n    }\n\n    /**\n     * 绑定按钮事件\n     */\n    private bindButtonEvents() {\n        // 暂停按钮\n        if (this.pauseButton) {\n            this.pauseButton.node.on(Button.EventType.CLICK, this.pauseGame, this);\n        }\n\n        // 继续游戏按钮\n        if (this.resumeButton) {\n            this.resumeButton.node.on(Button.EventType.CLICK, this.resumeGame, this);\n        }\n\n        // if (this.mainMenuButton2) {\n        //     this.mainMenuButton2.node.on(Button.EventType.CLICK, this.returnToLevelSelect, this);\n        // }\n\n        // 返回主菜单按钮\n        if (this.mainMenuButton) {\n            this.mainMenuButton.node.on(Button.EventType.CLICK, this.returnToLevelSelect, this);\n        }\n    }\n\n    loadLevelAndCar() {\n        const levelId = TempData.selectedLevel;\n        const carId = TempData.selectedCar;\n        let mapNode: Node | null = null;\n        let playerNode: Node | null = null;\n        // 1. 加载并实例化场景背景\n        if (levelId) {\n            resources.load(`prefab/levels/${levelId}`, Prefab, (err, prefab) => {\n                if (!err && prefab) {\n                    mapNode = instantiate(prefab);\n                    mapNode.setPosition(0, 0, 0);\n                    this.playGround.addChild(mapNode);\n                    \n                    // 场景预制体加载完成，查找AI车辆\n                    this.autoFindAIPlayers();\n                    this.notifyAIControllers();\n\n                    // 查找BulletRoot节点\n                    this.findBulletRoot();\n\n                    // 初始化敌人数量\n                    this.initialEnemyCount = this.aiPlayers.length;\n                    this.refreshEnemyCount(this.initialEnemyCount);\n                    \n                    // 2. 加载并实例化车辆\n                    if (carId) {\n                        resources.load(`prefab/cars/${carId}`, Prefab, (err2, prefab2) => {\n                            if (!err2 && prefab2) {\n                                playerNode = instantiate(prefab2);\n                                // 随机选择一个SpawnPoint的子节点\n                                const spawnChildren = this.spawnPoint.children;\n                                if (spawnChildren.length > 0) {\n                                    const randomIndex = Math.floor(Math.random() * spawnChildren.length);\n                                    const spawnNode = spawnChildren[randomIndex];\n                                    const spawnPos = spawnNode.getWorldPosition();\n                                    // 转换为Canvas的本地坐标\n                                    const localPos = this.canvas.getComponent(UITransform).convertToNodeSpaceAR(spawnPos);\n                                    playerNode.setPosition(localPos);\n                                    playerNode.setRotation(spawnNode.getRotation());\n                                    // 设置初始角度并初始化玩家血量\n                                    const playerScript = playerNode.getComponent(player);\n                                    if (playerScript) {\n                                        playerScript.init(spawnNode.angle);\n                                        // 初始化玩家血量数据\n                                        this.initializePlayerHealth(playerScript);\n                                    }\n                                    // 根据点位名称设置朝向\n                                    if ([\"point4\", \"point5\", \"point6\"].indexOf(spawnNode.name) !== -1) {\n                                        console.log(\"生成车辆在右侧\")\n                                        // playerNode.setRotationFromEuler(0, 0, 90);\n                                    } \n                                } \n                                this.canvas.addChild(playerNode);\n                                // 3. 通知相机\n                                const cameraFollow = this.camera.getComponent(CameraFollow);\n                                if (cameraFollow && mapNode && playerNode) {\n                                    cameraFollow.init(mapNode, playerNode);\n                                }\n                                 // 初始化颜料系统\n                                this.initializePaintSystem();\n                            }\n                            if (err2) {\n                                console.error('加载车辆预制体失败:', err2, carId);\n                                return;\n                            }\n                            if (!prefab2) {\n                                console.error('未找到车辆预制体:', carId);\n                                return;\n                            }\n                        });\n                    }\n                }\n                if (err) {\n                    console.error('加载关卡预制体失败:', err, levelId);\n                    return;\n                }\n                if (!prefab) {\n                    console.error('未找到关卡预制体:', levelId);\n                    return;\n                }\n            });\n        }\n        SoundManager.instance.playSoundEffect('carStart');\n    }\n\n    /**\n     * 查找所有AIPlayer组件\n     */\n    public autoFindAIPlayers() {\n        this.aiPlayers = [];\n        // 路径: Canvas → PlayGround → 场景预制体 → cars\n        const scene = this.node.scene;\n        if (!scene) return;\n        const canvas = scene.getChildByName('Canvas');\n        if (!canvas) return;\n        const playGround = canvas.getChildByName('PlayGround');\n        if (!playGround) return;\n        const sceneNode = playGround.children[0];\n        if (!sceneNode) return;\n        const carsNode = sceneNode.getChildByName('cars');\n        if (!carsNode) return;\n        for (const carNode of carsNode.children) {\n            const aiPlayer = carNode.getComponent(AIPlayer);\n            if (aiPlayer) {\n                this.aiPlayers.push(aiPlayer);\n            }\n        }\n    }\n\n    /**\n     * 获取AI车辆列表\n     */\n    public getAIPlayers(): AIPlayer[] {\n        return this.aiPlayers;\n    }\n\n    /**\n     * 查找BulletRoot节点\n     */\n    private findBulletRoot(): void {\n        // 直接在场景中搜索BulletRoot节点（递归搜索所有子节点）\n        const scene = this.node.scene;\n        if (!scene) {\n            console.warn('场景未找到');\n            return;\n        }\n\n        // 使用find方法递归查找BulletRoot节点\n        this.bulletRoot = scene.getChildByName('BulletRoot') || this.findNodeRecursively(scene, 'BulletRoot');\n\n        if (this.bulletRoot) {\n            console.log('BulletRoot节点找到:', this.bulletRoot.name);\n        } else {\n            console.warn('BulletRoot节点未找到，子弹将添加到场景根节点');\n        }\n    }\n\n    /**\n     * 递归查找指定名称的节点\n     */\n    private findNodeRecursively(parent: Node, name: string): Node | null {\n        for (const child of parent.children) {\n            if (child.name === name) {\n                return child;\n            }\n            const found = this.findNodeRecursively(child, name);\n            if (found) {\n                return found;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 通知所有AIController组件场景预制体已加载完成\n     */\n    private notifyAIControllers() {\n        const aiControllers = this.node.scene.getComponentsInChildren(AIController);\n        for (const aiController of aiControllers) {\n            aiController.onScenePrefabLoaded();\n        }\n    }\n\n    /**\n     * 初始化玩家血量数据\n     */\n    private initializePlayerHealth(playerScript: player) {\n        this.playerComponent = playerScript;\n        this.playerMaxHP = playerScript.getMaxHealth();\n        this.playerHP = this.playerMaxHP;\n\n        console.log(`玩家血量初始化完成: ${this.playerHP}/${this.playerMaxHP}`);\n\n        // 刷新血量UI\n        this.refreshPlayerHealthBar();\n    }\n\n    /**\n     * 减少玩家血量并刷新UI\n     */\n    public reducePlayerHP(amount: number) {\n        console.log('减少玩家血量:', amount);\n        this.playerHP = Math.max(0, this.playerHP - amount);\n        this.refreshPlayerHealthBar();\n\n        // 检查玩家是否死亡，但不立即触发游戏结束\n        // 游戏结束将由玩家车辆的摧毁动画完成后触发\n        if (this.playerHP <= 0 && this.currentState === GameState.RUNNING) {\n            console.log('玩家血量归零，等待摧毁动画完成');\n            // 不在这里调用 gameOver，让 player.ts 的动画完成后调用\n        }\n    }\n\n    /**\n     * 同步玩家血量（从player组件获取最新血量）\n     */\n    public syncPlayerHealth() {\n        if (this.playerComponent) {\n            this.playerHP = this.playerComponent.getCurrentHealth();\n            this.refreshPlayerHealthBar();\n\n            // 检查玩家是否死亡，但不立即触发游戏结束\n            // 游戏结束将由玩家车辆的摧毁动画完成后触发\n            if (this.playerHP <= 0 && this.currentState === GameState.RUNNING) {\n                console.log('玩家血量归零，等待摧毁动画完成');\n                // 不在这里调用 gameOver，让 player.ts 的动画完成后调用\n            }\n        }\n    }\n\n    /**\n     * 重置玩家血量到满血状态\n     */\n    public resetPlayerHealth() {\n        if (this.playerComponent) {\n            this.playerComponent.restoreVehicle(); // 恢复玩家车辆状态\n            this.playerHP = this.playerMaxHP;\n            this.refreshPlayerHealthBar();\n            console.log(`玩家血量已重置: ${this.playerHP}/${this.playerMaxHP}`);\n        }\n    }\n\n    /**\n     * 刷新玩家血量进度条\n     */\n    public refreshPlayerHealthBar() {\n        if (this.playerHealthBar && this.playerMaxHP > 0) {\n            this.playerHealthBar.progress = this.playerHP / this.playerMaxHP;\n        }\n    }\n\n    /**\n     * 刷新剩余敌人数量并刷新UI\n     */\n    public refreshEnemyCount(count: number) {\n        this.enemyCount = count;\n        if (this.enemyCountLabel) {\n            this.enemyCountLabel.string = `opponent: ${this.enemyCount}`;\n        }\n\n        // 检查是否所有敌人都被消灭\n        // 这个方法现在由AI车辆摧毁动画完成后调用，所以可以立即触发游戏结束\n        if (this.enemyCount <= 0 && this.currentState === GameState.RUNNING && this.initialEnemyCount > 0) {\n            console.log('所有AI车辆摧毁动画完成，触发游戏胜利');\n            this.gameOver(true); // 敌人全部消灭，游戏胜利\n        }\n    }\n\n    // ==================== 游戏状态管理方法 ====================\n\n    /**\n     * 暂停游戏\n     */\n    public pauseGame() {\n        if (this.currentState !== GameState.RUNNING) return;\n\n        this.currentState = GameState.PAUSED;\n\n        // 暂停游戏时间\n        director.pause();\n\n        // 显示暂停面板\n        if (this.pausePanel) {\n            this.pausePanel.active = true;\n        }\n\n        console.log('游戏已暂停');\n    }\n\n    /**\n     * 继续游戏\n     */\n    public resumeGame() {\n        if (this.currentState !== GameState.PAUSED) return;\n\n        this.currentState = GameState.RUNNING;\n\n        // 恢复游戏时间\n        director.resume();\n\n        // 隐藏暂停面板\n        if (this.pausePanel) {\n            this.pausePanel.active = false;\n        }\n\n        console.log('游戏已继续');\n    }\n\n    /**\n     * 游戏结束\n     * @param isVictory 是否胜利\n     */\n    public gameOver(isVictory: boolean) {\n        if (this.currentState === GameState.GAME_OVER) return;\n\n        this.currentState = GameState.GAME_OVER;\n        this.gameEndTime = Date.now();\n\n        // 暂停游戏\n        director.pause();\n\n        // 计算游戏结果数据\n        const gameResult = this.calculateGameResult(isVictory);\n\n        // 显示游戏结束面板并传递数据\n        if (this.gameOverPanel) {\n            this.gameOverPanel.active = true;\n            \n\n            // 获取GameOverPanel组件并设置数据\n            const gameOverPanelComponent = this.gameOverPanel.getComponent(GameOverPanel);\n            if (gameOverPanelComponent) {\n                gameOverPanelComponent.bindButtonEvents();\n                gameOverPanelComponent.setGameOverInfo(\n                    isVictory,\n                    gameResult.performance,\n                    gameResult.reward,\n                    gameResult.gameTime,\n                    gameResult.healthPercentage,\n                    gameResult.stars\n                );\n            }\n        }\n\n        // 给予玩家奖励\n        PlayerManager.instance.addMoney(gameResult.reward);\n\n        // 更新关卡进度\n        this.updateLevelProgress(this.gameEndTime - this.gameStartTime, gameResult.stars);\n\n        console.log(isVictory ? '游戏胜利！' : '游戏失败！');\n    }\n\n    /**\n     * 重新开始游戏\n     */\n    public restartGame() {\n        // 恢复游戏时间\n        director.resume();\n\n        // 重新加载当前场景\n        SceneTransition.loadScene(director.getScene()!.name);\n    }\n\n    /**\n     * 返回主菜单\n     */\n    public returnToLevelSelect() {\n        // 恢复游戏时间\n        director.resume();\n\n        // 加载主菜单场景\n        SceneTransition.loadScene('LevelSelect');\n    }\n\n    /**\n     * 计算游戏结果数据\n     * @param isVictory 是否胜利\n     * @returns 游戏结果数据\n     */\n    private calculateGameResult(isVictory: boolean): {\n        performance: string;\n        reward: number;\n        gameTime: number;\n        healthPercentage: number;\n        stars: number;\n    } {\n        // 计算游戏时长（秒）\n        const gameTimeSec = (this.gameEndTime - this.gameStartTime) / 1000;\n\n        // 计算生命值百分比\n        const healthPercentage = this.playerHP / this.playerMaxHP;\n\n        if (!isVictory) {\n            // 失败时返回基础数据\n            return {\n                performance: 'failure',\n                reward: 10,\n                gameTime: gameTimeSec,\n                healthPercentage: healthPercentage,\n                stars: 0\n            };\n        }\n\n        // 计算星星数（基于生命值和时间）\n        const stars = this.calculateStars(gameTimeSec, healthPercentage);\n\n        // 计算表现评价和奖励\n        const { performance, reward } = this.calculatePerformance(gameTimeSec, healthPercentage);\n\n        console.log(`游戏时长: ${gameTimeSec.toFixed(1)}秒, 生命值: ${(healthPercentage * 100).toFixed(1)}%, 星星: ${stars}, 评价: ${performance}, 奖励: ${reward}金币`);\n\n        return {\n            performance,\n            reward,\n            gameTime: gameTimeSec,\n            healthPercentage,\n            stars\n        };\n    }\n\n    /**\n     * 计算星星数（基于颜料占比）\n     */\n    private calculateStars(gameTime: number, healthPercentage: number): number {\n        // 获取玩家颜料占比\n        if (!this.paintManager) {\n            return 1; // 如果没有颜料管理器，默认1星\n        }\n\n        const playerPaintCount = this.paintManager.getPaintCountByOwner('player');\n        const totalPaintCount = this.paintManager.getTotalPaintCount();\n\n        if (totalPaintCount === 0) {\n            return 1; // 如果没有颜料，默认1星\n        }\n\n        const playerRatio = playerPaintCount / totalPaintCount;\n        const playerPercentage = playerRatio * 100;\n\n        // 检查是否摧毁了所有AI车辆\n        const destroyedAllEnemies = this.enemyCount <= 0 && this.initialEnemyCount > 0;\n\n        // 根据新的评价规则计算星星\n        if (playerPercentage >= 45) {\n            return 3; // 3星（A级）：颜料数量>=45%\n        } else if (playerPercentage >= 35) {\n            return 2; // 2星（B级）：颜料数量>=35%\n        } else if (playerPercentage >= 25 || destroyedAllEnemies) {\n            return 1; // 1星（C级）：颜料数量>=25% 或 摧毁所有AI车辆\n        } else {\n            return 0; // 不满足任何条件，0星\n        }\n    }\n\n    /**\n     * 更新关卡进度\n     */\n    private updateLevelProgress(gameTimeMs: number, stars: number) {\n        // 获取当前关卡ID\n        const currentLevelId = TempData.selectedLevel;\n        if (!currentLevelId) {\n            console.warn('无法获取当前关卡ID');\n            return;\n        }\n\n        // 更新PlayerManager中的关卡进度\n        PlayerManager.instance.updateLevelProgress(currentLevelId, gameTimeMs, stars);\n\n        console.log(`关卡进度已更新: ${currentLevelId}, 时间: ${gameTimeMs}ms, 星星: ${stars}`);\n    }\n\n    /**\n     * 计算表现评价（基于星星数）\n     */\n    private calculatePerformance(gameTime: number, healthPercentage: number): { performance: string, reward: number } {\n        // 先计算星星数\n        const stars = this.calculateStars(gameTime, healthPercentage);\n\n        let performance: string;\n        let reward: number;\n\n        // 根据星星数确定评价和奖励\n        switch (stars) {\n            case 3:\n                performance = 'A';\n                reward = 500;\n                break;\n            case 2:\n                performance = 'B';\n                reward = 300;\n                break;\n            case 1:\n                performance = 'C';\n                reward = 200;\n                break;\n            default:\n                performance = 'F';\n                reward = 50;\n                break;\n        }\n\n        return { performance, reward };\n    }\n\n\n\n    // ==================== 公共方法 ====================\n\n    /**\n     * 获取当前游戏状态\n     */\n    public getCurrentState(): GameState {\n        return this.currentState;\n    }\n\n    /**\n     * 获取游戏时长（秒）\n     */\n    public getGameTime(): number {\n        if (this.gameEndTime > 0) {\n            return (this.gameEndTime - this.gameStartTime) / 1000;\n        }\n        return (Date.now() - this.gameStartTime) / 1000;\n    }\n\n    /**\n     * 获取玩家当前生命值\n     */\n    public getPlayerHP(): number {\n        return this.playerHP;\n    }\n\n    /**\n     * 获取玩家最大生命值\n     */\n    public getPlayerMaxHP(): number {\n        return this.playerMaxHP;\n    }\n\n    /**\n     * 获取剩余敌人数量\n     */\n    public getEnemyCount(): number {\n        return this.enemyCount;\n    }\n\n    // ==================== 颜料系统 ====================\n\n    /**\n     * 初始化颜料系统\n     */\n    private initializePaintSystem(): void {\n        // 查找或创建PaintManager\n        this.paintManager = this.node.scene.getComponentInChildren(PaintManager);\n\n        \n    }\n\n    /**\n     * 清除所有颜料（游戏重新开始时调用）\n     */\n    public clearAllPaint(): void {\n        if (this.paintManager) {\n            this.paintManager.clearAllPaint();\n        }\n    }\n\n    /**\n     * 车辆喷洒颜料的中介方法\n     * @param paintPrefab 颜料预制体\n     * @param worldPosition 世界坐标位置\n     * @param vehicleId 车辆ID\n     */\n    public sprayPaint(paintPrefab: Prefab, worldPosition: Vec3, vehicleId: string): void {\n        if (this.paintManager && paintPrefab) {\n            this.paintManager.addPaint(paintPrefab, worldPosition, vehicleId);\n        } else {\n            console.warn('GameManager: 无法喷洒颜料，PaintManager或颜料预制体为空');\n        }\n    }\n\n    /**\n     * 获取所有车辆的颜料占比\n     * @returns 包含每个车辆ID和其占比的对象\n     */\n    public getAllVehiclePaintRatios(): { [vehicleId: string]: number } {\n        if (this.paintManager) {\n            return this.paintManager.getAllPaintRatios();\n        }\n        return {};\n    }\n\n    /**\n     * 获取排序后的颜料占比（从高到低）\n     * @returns 按占比排序的数组\n     */\n    public getSortedVehiclePaintRatios(): Array<{ vehicleId: string, ratio: number, count: number }> {\n        if (this.paintManager) {\n            const sorted = this.paintManager.getSortedPaintRatios();\n            // 将ownerId重命名为vehicleId以保持一致性\n            return sorted.map(item => ({\n                vehicleId: item.ownerId,\n                ratio: item.ratio,\n                count: item.count\n            }));\n        }\n        return [];\n    }\n\n    /**\n     * 获取颜料管理器\n     */\n    public getPaintManager(): PaintManager | null {\n        return this.paintManager;\n    }\n\n    // ==================== 倒计时系统 ====================\n\n    /**\n     * 更新倒计时\n     * @param deltaTime 帧时间间隔\n     */\n    private updateCountdown(deltaTime: number): void {\n        this.remainingTime -= deltaTime;\n\n        // 检查是否时间到了\n        if (this.remainingTime <= 0) {\n            this.remainingTime = 0;\n            this.onCountdownFinished();\n        }\n    }\n\n    /**\n     * 倒计时结束处理\n     */\n    private onCountdownFinished(): void {\n        console.log('倒计时结束，游戏结束');\n        // 计算最终的颜料占比并结束游戏\n        this.gameOver(this.determineWinner());\n    }\n\n    /**\n     * 确定获胜者（基于新的胜利条件）\n     * @returns 是否玩家获胜\n     */\n    private determineWinner(): boolean {\n        // 检查玩家是否存活\n        if (this.playerHP <= 0) {\n            console.log('玩家已死亡，游戏失败');\n            return false;\n        }\n\n        // 检查是否所有AI车辆都被摧毁\n        if (this.enemyCount <= 0 && this.initialEnemyCount > 0) {\n            console.log('所有AI车辆已被摧毁，游戏胜利');\n            return true;\n        }\n\n        // 获取玩家颜料占比\n        if (!this.paintManager) {\n            return false; // 如果没有颜料管理器，默认玩家失败\n        }\n\n        const playerPaintCount = this.paintManager.getPaintCountByOwner('player');\n        const totalPaintCount = this.paintManager.getTotalPaintCount();\n\n        if (totalPaintCount === 0) {\n            return false; // 如果没有颜料，默认玩家失败\n        }\n\n        const playerRatio = playerPaintCount / totalPaintCount;\n        console.log(`玩家颜料占比: ${(playerRatio * 100).toFixed(1)}%`);\n\n        // 玩家存活且颜料占比>25%则获胜\n        if (playerRatio > 0.25) {\n            console.log('玩家颜料占比超过25%，游戏胜利');\n            return true;\n        } else {\n            console.log('玩家颜料占比不足25%，游戏失败');\n            return false;\n        }\n    }\n\n    /**\n     * 获取剩余时间\n     * @returns 剩余时间（秒）\n     */\n    public getRemainingTime(): number {\n        return Math.max(0, this.remainingTime);\n    }\n\n    /**\n     * 获取剩余时间的格式化字符串\n     * @returns 格式化的时间字符串 (MM:SS)\n     */\n    public getFormattedRemainingTime(): string {\n        const totalSeconds = Math.ceil(this.getRemainingTime());\n        const minutes = Math.floor(totalSeconds / 60);\n        const seconds = totalSeconds % 60;\n\n        // 手动实现padStart功能以兼容旧版本\n        const minutesStr = minutes < 10 ? '0' + minutes : minutes.toString();\n        const secondsStr = seconds < 10 ? '0' + seconds : seconds.toString();\n\n        return `${minutesStr}:${secondsStr}`;\n    }\n\n    // ==================== 射击系统 ====================\n\n    /**\n     * 玩家射击\n     */\n    public playerShoot(): void {\n        if (this.playerComponent) {\n            this.playerComponent.shoot();\n        }\n    }\n\n    /**\n     * 发射子弹\n     * @param bulletPrefab 子弹预制体\n     * @param position 发射位置\n     * @param direction 发射方向\n     * @param shooterId 发射者ID\n     * @param weaponType 武器类型\n     */\n    public fireBullet(bulletPrefab: Prefab, position: Vec3, direction: Vec2, shooterId: string, weaponType: WeaponType): void {\n        // 实例化子弹\n        const bulletNode = instantiate(bulletPrefab);\n\n        // 获取子弹组件\n        const bulletComponent = bulletNode.getComponent(Bullet);\n        if (bulletComponent) {\n            // 初始化子弹\n            bulletComponent.init(direction, shooterId);\n            // 设置子弹类型（WeaponType和BulletType值相同）\n            bulletComponent.bulletType = weaponType as any;\n        }\n\n        // 将子弹添加到BulletRoot节点或场景中\n        if (this.bulletRoot  ) {\n            // 转换世界坐标到BulletRoot的本地坐标\n            const localPos = this.bulletRoot.getComponent(UITransform)?.convertToNodeSpaceAR(position);\n            if (localPos) {\n                bulletNode.setPosition(localPos);\n            } else {\n                bulletNode.setWorldPosition(position);\n            }\n            this.bulletRoot.addChild(bulletNode);\n            console.log('子弹已添加到BulletRoot节点');\n        }\n        // } else {\n        //     const localPos = this.playerComponent.node.getComponent(UITransform)?.convertToNodeSpaceAR(position);\n        //     // 如果没有找到BulletRoot，添加到场景根节点\n        //     bulletNode.setWorldPosition(localPos);\n        //     this.playerComponent.node.addChild(bulletNode);\n        //     console.log('子弹已添加到wa玩家车辆根节点');\n        // }\n    }\n\n    /**\n     * 获取玩家组件\n     */\n    public getPlayerComponent(): player | null {\n        return this.playerComponent;\n    }\n\n}"]}